// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(uuid())
  email     String  @unique
  name      String
  password  String
  confirmed Boolean @default(false)
  isActive  Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  TeamProject TeamProject[]
  Project     Project[]

  TaskStatusHistory TaskStatusHistory[]
  Note              Note[]
  VerificationToken VerificationToken?
}

model VerificationToken {
  id        String   @id @default(uuid())
  token     String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([token])
  @@index([expiresAt])
}

model TeamProject {
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  role      Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, projectId])
}

model Project {
  id          String  @id @default(uuid())
  projectName String
  clientName  String
  description String
  isActive    Boolean @default(true)
  manager     User    @relation(fields: [managerId], references: [id])
  managerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  TeamProject TeamProject[]
  Task        Task[]
}

enum TaskStatus {
  PENDING
  ON_HOLD
  IN_PROGRESS
  UNDER_REVIEW
  COMPLETED
}

model Task {
  id          String     @id @default(uuid())
  name        String     @db.VarChar(255)
  description String     @db.Text
  status      TaskStatus @default(PENDING)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  project     Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  notes       Note[]
  completedBy TaskStatusHistory[]

  @@index([projectId])
}

model TaskStatusHistory {
  id        String     @id @default(uuid())
  status    TaskStatus
  createdAt DateTime   @default(now())

  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String
  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@index([taskId])
  @@index([userId])
}

model Note {
  id        String @id @default(uuid())
  content   String @db.Text
  createdBy User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String
  userId String

  @@index([taskId])
}
